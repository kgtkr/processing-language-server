--- cache/processing-src/processing-1281-4.0b6/java/src/processing/mode/java/PreprocService.java	2022-02-14 03:20:16.000000000 +0900
+++ src/main/java/processing/mode/java/PreprocService2.java	2022-03-11 11:18:04.000000000 +0900
@@ -74,11 +74,12 @@ import processing.data.StringList;
  * and related development services. These are reported as {Problem} instances
  * via a callback registered by an {Editor}.
  */
-public class PreprocService {
+public class PreprocService2 {
   private final static int TIMEOUT_MILLIS = 100;
   private final static int BLOCKING_TIMEOUT_SECONDS = 3000;
 
-  protected final JavaEditor editor;
+  protected final JavaMode javaMode;
+  protected final Sketch sketch;
 
   protected final ASTParser parser = ASTParser.newParser(AST.JLS11);
 
@@ -104,8 +105,9 @@ public class PreprocService {
    * Create a new preprocessing service to support an editor.
    * @param editor The editor supported by this service and receives issues.
    */
-  public PreprocService(JavaEditor editor) {
-    this.editor = editor;
+  public PreprocService2(JavaMode javaMode, Sketch sketch) {
+    this.javaMode = javaMode;
+    this.sketch = sketch;
 
     // Register listeners for first run
     whenDone(this::fireListeners);
@@ -342,8 +344,7 @@ public class PreprocService {
     List<ImportStatement> codeFolderImports = result.codeFolderImports;
     List<ImportStatement> programImports = result.programImports;
 
-    JavaMode javaMode = (JavaMode) editor.getMode();
-    Sketch sketch = result.sketch = editor.getSketch();
+    result.sketch = this.sketch;
     String className = sketch.getMainName();
 
     StringBuilder workBuffer = new StringBuilder();
@@ -385,7 +386,7 @@ public class PreprocService {
 
     // Core and default imports
     PdePreprocessor preProcessor =
-      editor.createPreprocessor(editor.getSketch().getMainName());
+        PdePreprocessor.builderFor(this.sketch.getName()).build();
     if (coreAndDefaultImports == null) {
       coreAndDefaultImports = buildCoreAndDefaultImports(preProcessor);
     }
@@ -421,7 +422,7 @@ public class PreprocService {
       final int endNumLines = numLines;
 
       preprocessorResult.getPreprocessIssues().stream()
-          .map((x) -> ProblemFactory.build(x, tabLineStarts, endNumLines, editor))
+          .map((x) -> ProblemFactory.build(x, tabLineStarts))
           .forEach(result.otherProblems::add);
 
       result.hasSyntaxErrors = true;
